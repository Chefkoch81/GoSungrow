// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package api

import "reflect"

var Types = map[string]reflect.Type{
	"Api": reflect.TypeOf((*Api)(nil)).Elem(),
	"AreaName": reflect.TypeOf((*AreaName)(nil)).Elem(),
	"Common": reflect.TypeOf((*Common)(nil)).Elem(),
	"ContentHandler": reflect.TypeOf((*ContentHandler)(nil)).Elem(),
	"ContentHandlers": reflect.TypeOf((*ContentHandlers)(nil)).Elem(),
	"ContentTable": reflect.TypeOf((*ContentTable)(nil)).Elem(),
	"ContentType": reflect.TypeOf((*ContentType)(nil)).Elem(),
	"ContentTypeSlug": reflect.TypeOf((*ContentTypeSlug)(nil)).Elem(),
	"ContentTypes": reflect.TypeOf((*ContentTypes)(nil)).Elem(),
	"DbField": reflect.TypeOf((*DbField)(nil)).Elem(),
	"DbFields": reflect.TypeOf((*DbFields)(nil)).Elem(),
	"EndPointName": reflect.TypeOf((*EndPointName)(nil)).Elem(),
	"ErrorArg": reflect.TypeOf((*ErrorArg)(nil)).Elem(),
	"ErrorArgs": reflect.TypeOf((*ErrorArgs)(nil)).Elem(),
	"GetFunc": reflect.TypeOf((*GetFunc)(nil)).Elem(),
	"Guid": reflect.TypeOf((*Guid)(nil)).Elem(),
	"Json": reflect.TypeOf((*Json)(nil)).Elem(),
	"MimeType": reflect.TypeOf((*MimeType)(nil)).Elem(),
	"ParentGuid": reflect.TypeOf((*ParentGuid)(nil)).Elem(),
	"RequestCommon": reflect.TypeOf((*RequestCommon)(nil)).Elem(),
	"Resource": reflect.TypeOf((*Resource)(nil)).Elem(),
	"ResponseCommon": reflect.TypeOf((*ResponseCommon)(nil)).Elem(),
	"SetFunc": reflect.TypeOf((*SetFunc)(nil)).Elem(),
	"TypeAreaNames": reflect.TypeOf((*TypeAreaNames)(nil)).Elem(),
	"TypeEndPoint": reflect.TypeOf((*TypeEndPoint)(nil)).Elem(),
	"TypeEndPoints": reflect.TypeOf((*TypeEndPoints)(nil)).Elem(),
	"Url": reflect.TypeOf((*Url)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"AppendUrl": reflect.ValueOf(AppendUrl),
	"CreateEndPoints": reflect.ValueOf(CreateEndPoints),
	"GetContentTypes": reflect.ValueOf(GetContentTypes),
	"Initialize": reflect.ValueOf(Initialize),
	"LoadMe": reflect.ValueOf(LoadMe),
	"LogError": reflect.ValueOf(LogError),
	"MakeNewFrom": reflect.ValueOf(MakeNewFrom),
	"NewContentType": reflect.ValueOf(NewContentType),
	"SetBasicAuth": reflect.ValueOf(SetBasicAuth),
	"SetUrl": reflect.ValueOf(SetUrl),
	"ToSnakeCase": reflect.ValueOf(ToSnakeCase),
}

var Variables = map[string]reflect.Value{
	"ApiFoo": reflect.ValueOf(&ApiFoo),
	"OnlyOnce": reflect.ValueOf(&OnlyOnce),
	"SunGro": reflect.ValueOf(&SunGro),
}

var Consts = map[string]reflect.Value{
	"ApplicationJson": reflect.ValueOf(ApplicationJson),
	"ApplicationXml": reflect.ValueOf(ApplicationXml),
	"DoesNotImplement": reflect.ValueOf(DoesNotImplement),
	"ErrorType": reflect.ValueOf(ErrorType),
	"Instance": reflect.ValueOf(Instance),
	"Interface": reflect.ValueOf(Interface),
}

