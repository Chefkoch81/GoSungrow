// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package conference

import "reflect"

var Types = map[string]reflect.Type{
	"Conference": reflect.TypeOf((*Conference)(nil)).Elem(),
	"ConferenceCdrCountRequest": reflect.TypeOf((*ConferenceCdrCountRequest)(nil)).Elem(),
	"ConferenceCdrCountResponse": reflect.TypeOf((*ConferenceCdrCountResponse)(nil)).Elem(),
	"ConferenceCdrReadRequest": reflect.TypeOf((*ConferenceCdrReadRequest)(nil)).Elem(),
	"ConferenceCdrReadResponse": reflect.TypeOf((*ConferenceCdrReadResponse)(nil)).Elem(),
	"Count": reflect.TypeOf((*Count)(nil)).Elem(),
	"CountRequest": reflect.TypeOf((*CountRequest)(nil)).Elem(),
	"CountResponse": reflect.TypeOf((*CountResponse)(nil)).Elem(),
	"Create": reflect.TypeOf((*Create)(nil)).Elem(),
	"CreateRequest": reflect.TypeOf((*CreateRequest)(nil)).Elem(),
	"CreateResponse": reflect.TypeOf((*CreateResponse)(nil)).Elem(),
	"Delete": reflect.TypeOf((*Delete)(nil)).Elem(),
	"DeleteRequest": reflect.TypeOf((*DeleteRequest)(nil)).Elem(),
	"DeleteResponse": reflect.TypeOf((*DeleteResponse)(nil)).Elem(),
	"List": reflect.TypeOf((*List)(nil)).Elem(),
	"ListRequest": reflect.TypeOf((*ListRequest)(nil)).Elem(),
	"ListResponse": reflect.TypeOf((*ListResponse)(nil)).Elem(),
	"ListResponseSingle": reflect.TypeOf((*ListResponseSingle)(nil)).Elem(),
	"MeetingCountRequest": reflect.TypeOf((*MeetingCountRequest)(nil)).Elem(),
	"MeetingCountResponse": reflect.TypeOf((*MeetingCountResponse)(nil)).Elem(),
	"MeetingReadRequest": reflect.TypeOf((*MeetingReadRequest)(nil)).Elem(),
	"MeetingReadResponse": reflect.TypeOf((*MeetingReadResponse)(nil)).Elem(),
	"ParticipantCountRequest": reflect.TypeOf((*ParticipantCountRequest)(nil)).Elem(),
	"ParticipantCountResponse": reflect.TypeOf((*ParticipantCountResponse)(nil)).Elem(),
	"ParticipantReadRequest": reflect.TypeOf((*ParticipantReadRequest)(nil)).Elem(),
	"ParticipantReadResponse": reflect.TypeOf((*ParticipantReadResponse)(nil)).Elem(),
	"Read": reflect.TypeOf((*Read)(nil)).Elem(),
	"ReadRequest": reflect.TypeOf((*ReadRequest)(nil)).Elem(),
	"ReadResponse": reflect.TypeOf((*ReadResponse)(nil)).Elem(),
	"ReadResponseSingle": reflect.TypeOf((*ReadResponseSingle)(nil)).Elem(),
	"Update": reflect.TypeOf((*Update)(nil)).Elem(),
	"UpdateRequest": reflect.TypeOf((*UpdateRequest)(nil)).Elem(),
	"UpdateResponse": reflect.TypeOf((*UpdateResponse)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
}

var Variables = map[string]reflect.Value{
}

var Consts = map[string]reflect.Value{
	"ConferenceCdrCountUrl": reflect.ValueOf(ConferenceCdrCountUrl),
	"ConferenceCdrReadUrl": reflect.ValueOf(ConferenceCdrReadUrl),
	"MeetingCountUrl": reflect.ValueOf(MeetingCountUrl),
	"MeetingReadUrl": reflect.ValueOf(MeetingReadUrl),
	"ParticipantCountUrl": reflect.ValueOf(ParticipantCountUrl),
	"ParticipantReadUrl": reflect.ValueOf(ParticipantReadUrl),
}

