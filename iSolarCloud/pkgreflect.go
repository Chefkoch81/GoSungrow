// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package iSolarCloud

import "reflect"

var Types = map[string]reflect.Type{
	"Areas": reflect.TypeOf((*Areas)(nil)).Elem(),
	"CommonAttributes": reflect.TypeOf((*CommonAttributes)(nil)).Elem(),
	"Login": reflect.TypeOf((*Login)(nil)).Elem(),
	"LoginAttributes": reflect.TypeOf((*LoginAttributes)(nil)).Elem(),
	"LoginCollection": reflect.TypeOf((*LoginCollection)(nil)).Elem(),
	"LoginPrivileges": reflect.TypeOf((*LoginPrivileges)(nil)).Elem(),
	"LoginResource": reflect.TypeOf((*LoginResource)(nil)).Elem(),
	"OutputType": reflect.TypeOf((*OutputType)(nil)).Elem(),
	"ResourceHandler": reflect.TypeOf((*ResourceHandler)(nil)).Elem(),
	"ResourceHandlers": reflect.TypeOf((*ResourceHandlers)(nil)).Elem(),
	"ResourceType": reflect.TypeOf((*ResourceType)(nil)).Elem(),
	"ResourceTypeSlug": reflect.TypeOf((*ResourceTypeSlug)(nil)).Elem(),
	"ResourceTypes": reflect.TypeOf((*ResourceTypes)(nil)).Elem(),
	"Something": reflect.TypeOf((*Something)(nil)).Elem(),
	"SomethingAttributes": reflect.TypeOf((*SomethingAttributes)(nil)).Elem(),
	"SomethingCollection": reflect.TypeOf((*SomethingCollection)(nil)).Elem(),
	"SomethingResource": reflect.TypeOf((*SomethingResource)(nil)).Elem(),
	"SunGro": reflect.TypeOf((*SunGro)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"GetResourceTypes": reflect.ValueOf(GetResourceTypes),
	"Initialize": reflect.ValueOf(Initialize),
	"NewResourceType": reflect.ValueOf(NewResourceType),
	"NewSunGro": reflect.ValueOf(NewSunGro),
}

var Variables = map[string]reflect.Value{
	"ContentTypes": reflect.ValueOf(&ContentTypes),
	"LoginType": reflect.ValueOf(&LoginType),
	"SomethingType": reflect.ValueOf(&SomethingType),
}

var Consts = map[string]reflect.Value{
	"StringTypeGit": reflect.ValueOf(StringTypeGit),
	"StringTypeGoogle": reflect.ValueOf(StringTypeGoogle),
	"StringTypeHuman": reflect.ValueOf(StringTypeHuman),
	"StringTypeJson": reflect.ValueOf(StringTypeJson),
	"TypeGit": reflect.ValueOf(TypeGit),
	"TypeGoogle": reflect.ValueOf(TypeGoogle),
	"TypeHuman": reflect.ValueOf(TypeHuman),
	"TypeJson": reflect.ValueOf(TypeJson),
}

